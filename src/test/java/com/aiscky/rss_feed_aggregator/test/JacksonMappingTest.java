package com.aiscky.rss_feed_aggregator.test;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.io.IOException;

import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.aiscky.rss_feed_aggregator.Application;
import com.aiscky.rss_feed_aggregator.model.RSSChannel;
import com.aiscky.rss_feed_aggregator.model.RSSDocument;
import com.aiscky.rss_feed_aggregator.model.RSSItem;
import com.aiscky.rss_feed_aggregator.service.ChannelMapperService;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@WebAppConfiguration
public class JacksonMappingTest {
    
	private final String TESTING_RSS_FILE = "/testing/rss.xml";
	
	private MockMvc mockMvc;
	
	@Autowired
    private WebApplicationContext webApplicationContext;
	
	@Autowired
	ChannelMapperService channelParser;
	
	@Before
    public void setup() throws Exception {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}

	@Test public void assertingRessourceReadable() throws IOException {
		String rss = IOUtils.toString(this.getClass().getResourceAsStream(TESTING_RSS_FILE), "UTF-8");
		
		assertNotEquals(rss, "");
	}
	
	@Test public void assertingObjectMappedNotNull() {
        XmlMapper xmlMapper = new XmlMapper();
       
        RSSDocument doc = null;
		try {
			doc = xmlMapper.readValue(this.getClass().getResourceAsStream(TESTING_RSS_FILE), RSSDocument.class);
			Assert.assertTrue(true);
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        assertNotEquals(doc.getChannel(), null);
	}
	
	@Test public void assertingXMLMapperChannelOutputIsValid() throws IOException {
        XmlMapper xmlMapper = new XmlMapper();

        RSSDocument doc = xmlMapper.readValue(this.getClass().getResourceAsStream(TESTING_RSS_FILE), RSSDocument.class);
                
        assertEquals("W3Schools Home Page", doc.getChannel().getTitle());
        assertEquals("Free web building tutorials", doc.getChannel().getDescription());
    }
	
	@Test public void assertXMLMapperItemsExists() throws IOException {
		RSSChannel channel = this.channelParser.mapChannelFromLocalUrl(TESTING_RSS_FILE);
		
		assertNotEquals(channel.getItems(), null);
		Assert.assertFalse(channel.getItems().size() == 0);
	}
	
	@Test public void assertXMLMapperItemsOutputIsValid() throws IOException {
		RSSChannel channel = this.channelParser.mapChannelFromLocalUrl(TESTING_RSS_FILE);
		
		RSSItem item = channel.getItems().get(0);
		
		assertEquals(item.getTitle(), "RSS Tutorial");
		assertEquals(item.getDescription(), "New RSS tutorial on W3Schools");
	}
}
